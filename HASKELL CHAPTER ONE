import Data.List (sortBy)
import Data.Ord (comparing)

double :: Int -> Int
double x = x * 2

increment :: Int -> Int
increment x = x + 1

doubleThenIncrement :: Int -> Int
doubleThenIncrement = increment . double
-- Example: doubleThenIncrement 3 => (3*2)+1 = 7


-- HC1T2 - Task 2: Pure Function Example
circleArea :: Floating a => a -> a
circleArea r = pi * r * r
-- Example: circleArea 5 => 78.53981633974483


-- HC1T3 - Task 3: Checking if a Number is Greater than 18
greaterThan18 :: Int -> Bool
greaterThan18 x = x > 18
-- Example: greaterThan18 20 => True


-- HC1T4 - Task 4: Composing a Function to Process Player Data
extractPlayers :: [(String, Int)] -> [String]
extractPlayers = map fst

sortByScore :: [(String, Int)] -> [(String, Int)]
sortByScore = sortBy (flip (comparing snd))

topThree :: [(String, Int)] -> [(String, Int)]
topThree = take 3

getTopThreePlayers :: [(String, Int)] -> [String]
getTopThreePlayers = extractPlayers . topThree . sortByScore
-- Example:
-- getTopThreePlayers [("Alice", 50), ("Bob", 80), ("Tom", 40), ("John", 70)]
-- => ["Bob", "John", "Alice"]

-- HC1T5 - Task 5: Laziness in Haskell
infiniteNumbers :: [Integer]
infiniteNumbers = [1..]

firstN :: Int -> [Integer]
firstN n = take n infiniteNumbers
-- Example: firstN 5 => [1,2,3,4,5]

-- HC1T6 - Task 6: Using Type Signatures
addNumbers :: Int -> Int -> Int
addNumbers x y = x + y
-- Example: addNumbers 3 4 => 7


-- HC1T7 - Task 7: Converting Fahrenheit to Celsius
fToC :: Float -> Float
fToC f = (f - 32) * (5 / 9)
-- Example: fToC 98.6 => 37.0


-- HC1T8 - Task 8: Higher-Order Functions
applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)
-- Example: applyTwice (+3) 4 => 10
main :: IO ()
main = do
    putStrLn $ "doubleThenIncrement 3: " ++ show (doubleThenIncrement 3)
    putStrLn $ "circleArea 5: " ++ show (circleArea 5)
    putStrLn $ "greaterThan18 20: " ++ show (greaterThan18 20)
    putStrLn $ "getTopThreePlayers: " ++ show (getTopThreePlayers [("Alice", 50), ("Bob", 80), ("Tom", 40), ("John", 70)])
    putStrLn $ "firstN 5: " ++ show (firstN 5)
    putStrLn $ "addNumbers 3 4: " ++ show (addNumbers 3 4)
    putStrLn $ "fToC 98.6: " ++ show (fToC 98.6)
    putStrLn $ "applyTwice (+3) 4: " ++ show (applyTwice (+3) 4)import Data.List (sortBy)
