-- HC5T1: Using applyTwice to apply function three times
applyThrice :: (Int -> Int) -> Int -> Int
applyThrice f x = f (f (f x))

-- HC5T2: Filtering Odd Numbers
oddNumbers :: [Int]
oddNumbers = filter odd [1..30]

-- HC5T3: Checking for Uppercase Letters
startsWithUppercase :: [String] -> Bool
startsWithUppercase wordsList = any (\w -> not (null w) && head w `elem` ['A'..'Z']) wordsList

-- HC5T4: Using Lambda Functions
biggerThan10 :: Int -> Bool
biggerThan10 = \x -> x > 10

-- HC5T5: Partial Application
multiplyByFive :: Int -> Int
multiplyByFive = (* 5)

-- HC5T6: Function Composition
squareEvenNumbers :: [Int] -> [Int]
squareEvenNumbers = filter even . map (^2)

-- HC5T7: The $ Operator
result :: Int
result = sum $ map (*2) $ filter (>3) [1..10]

-- HC5T8: Point-Free Style
addFive :: Int -> Int
addFive = (+ 5)

-- HC5T9: Higher-Order Function to Transform a List
transformList :: (a -> a) -> [a] -> [a]
transformList f = map (f . f)

-- HC5T10: Combining Higher-Order Functions
anySquareGreaterThan50 :: [Int] -> Bool
anySquareGreaterThan50 = any (>50) . map (^2) . filter (>0)

-- Main function to test all
main :: IO ()
main = do
    -- HC5T1
    print $ applyThrice (+1) 0       -- should print 3
    print $ applyThrice (*2) 1       -- should print 8

    -- HC5T2
    print oddNumbers

    -- HC5T3
    print $ startsWithUppercase ["apple", "Banana", "cherry"] -- True
    print $ startsWithUppercase ["apple", "banana"]           -- False

    -- HC5T4
    print $ biggerThan10 5   -- False
    print $ biggerThan10 15  -- True

    -- HC5T5
    print $ multiplyByFive 7 -- 35

    -- HC5T6
    print $ squareEvenNumbers [1..10] -- [4,16,36,64,100]

    -- HC5T7
    print result -- sum of doubled numbers greater than 3 from 1..10

    -- HC5T8
    print $ addFive 10 -- 15

    -- HC5T9
    print $ transformList (+1) [1,2,3] -- [3,4,5]

    -- HC5T10
    print $ anySquareGreaterThan50 [3,5,8] -- True
    print $ anySquareGreaterThan50 [1,2,3] -- False
