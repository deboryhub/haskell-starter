-- HC7T1: Eq Instance for Color
data Color = Red | Green | Blue deriving (Show, Read, Enum, Bounded)

instance Eq Color where
    Red   == Red   = True
    Green == Green = True
    Blue  == Blue  = True
    _     == _     = False

-- HC7T2: Ord Instance for Color
instance Ord Color where
    compare Red Green   = LT
    compare Red Blue    = LT
    compare Green Blue  = LT
    compare x y | x == y = EQ
    compare _ _ = GT

-- HC7T3: Function Using Multiple Constraints
compareValues :: (Eq a, Ord a) => a -> a -> a
compareValues x y = if x >= y then x else y

-- HC7T4: Custom Type with Show and Read
data Shape = Circle Double | Rectangle Double Double

instance Show Shape where
    show (Circle r) = "Circle with radius " ++ show r
    show (Rectangle w h) = "Rectangle with width " ++ show w ++ " and height " ++ show h

instance Read Shape where
    readsPrec _ input =
        case words input of
            ["Circle", r] -> [(Circle (read r), "")]
            ["Rectangle", w, h] -> [(Rectangle (read w) (read h), "")]
            _ -> []

-- Define Eq and Ord for Shape based on area
instance Eq Shape where
    s1 == s2 = shapeArea s1 == shapeArea s2

instance Ord Shape where
    compare s1 s2 = compare (shapeArea s1) (shapeArea s2)

shapeArea :: Shape -> Double
shapeArea (Circle r) = pi * r * r
shapeArea (Rectangle w h) = w * h

-- HC7T5: Function with Num Constraint
squareArea :: Num a => a -> a
squareArea side = side * side

-- HC7T6: Using Integral and Floating
circleCircumference :: (Floating a) => a -> a
circleCircumference r = 2 * pi * r

-- HC7T7: Bounded and Enum
nextColor :: Color -> Color
nextColor c
  | c == maxBound = minBound
  | otherwise     = succ c

-- HC7T8: Parse a Value from a String Using Read
parseShape :: String -> Maybe Shape
parseShape s = case reads s of
    [(shape, _)] -> Just shape
    _ -> Nothing

-- HC7T9: Type Class with Multiple Instances
class Describable a where
    describe :: a -> String

instance Describable Bool where
    describe True = "This is True"
    describe False = "This is False"

instance Describable Shape where
    describe (Circle r) = "A circle of radius " ++ show r
    describe (Rectangle w h) = "A rectangle of width " ++ show w ++ " and height " ++ show h

-- HC7T10: Function with Multiple Type Class Constraints
describeAndCompare :: (Describable a, Ord a) => a -> a -> String
describeAndCompare x y = describe (compareValues x y)

-- Main: runs all tasks sequentially
main :: IO ()
main = do
    putStrLn "HC7T1: Eq Instance for Color"
    print (Red == Red)
    print (Red == Blue)

    putStrLn "\nHC7T2: Ord Instance for Color"
    print (Red < Green)
    print (Green < Blue)

    putStrLn "\nHC7T3: compareValues"
    print (compareValues 10 20 :: Int)

    putStrLn "\nHC7T4: Shape Show/Read"
    print (Circle 5.0)
    print (Rectangle 4.0 6.0)

    putStrLn "\nHC7T5: squareArea"
    print (squareArea 5 :: Int)
    print (squareArea 3.5 :: Double)

    putStrLn "\nHC7T6: circleCircumference"
    print (circleCircumference 7.0)

    putStrLn "\nHC7T7: nextColor"
    print (nextColor Red)
    print (nextColor Blue)

    putStrLn "\nHC7T8: parseShape"
    print (parseShape "Circle 10")
    print (parseShape "Rectangle 3 4")
    print (parseShape "Triangle 5 6")

    putStrLn "\nHC7T9: Describable"
    print (describe True)
    print (describe False)
    print (describe (Rectangle 2 3))

    putStrLn "\nHC7T10: describeAndCompare"
    print (describeAndCompare (Rectangle 2 3) (Rectangle 5 6))
